# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Metric(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, cpu_model: str=None, cpu_cores: int=None, ram_capacity: str=None):  # noqa: E501
        """Metric - a model defined in Swagger

        :param id: The id of this Metric.  # noqa: E501
        :type id: int
        :param cpu_model: The cpu_model of this Metric.  # noqa: E501
        :type cpu_model: str
        :param cpu_cores: The cpu_cores of this Metric.  # noqa: E501
        :type cpu_cores: int
        :param ram_capacity: The ram_capacity of this Metric.  # noqa: E501
        :type ram_capacity: str
        """
        self.swagger_types = {
            'id': int,
            'cpu_model': str,
            'cpu_cores': int,
            'ram_capacity': str
        }

        self.attribute_map = {
            'id': 'id',
            'cpu_model': 'cpu_model',
            'cpu_cores': 'cpu_cores',
            'ram_capacity': 'ram_capacity'
        }
        self._id = id
        self._cpu_model = cpu_model
        self._cpu_cores = cpu_cores
        self._ram_capacity = ram_capacity

    @classmethod
    def from_dict(cls, dikt) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Metric of this Metric.  # noqa: E501
        :rtype: Metric
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Metric.


        :return: The id of this Metric.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Metric.


        :param id: The id of this Metric.
        :type id: int
        """

        self._id = id

    @property
    def cpu_model(self) -> str:
        """Gets the cpu_model of this Metric.


        :return: The cpu_model of this Metric.
        :rtype: str
        """
        return self._cpu_model

    @cpu_model.setter
    def cpu_model(self, cpu_model: str):
        """Sets the cpu_model of this Metric.


        :param cpu_model: The cpu_model of this Metric.
        :type cpu_model: str
        """
        if cpu_model is None:
            raise ValueError("Invalid value for `cpu_model`, must not be `None`")  # noqa: E501

        self._cpu_model = cpu_model

    @property
    def cpu_cores(self) -> int:
        """Gets the cpu_cores of this Metric.


        :return: The cpu_cores of this Metric.
        :rtype: int
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores: int):
        """Sets the cpu_cores of this Metric.


        :param cpu_cores: The cpu_cores of this Metric.
        :type cpu_cores: int
        """
        if cpu_cores is None:
            raise ValueError("Invalid value for `cpu_cores`, must not be `None`")  # noqa: E501

        self._cpu_cores = cpu_cores

    @property
    def ram_capacity(self) -> str:
        """Gets the ram_capacity of this Metric.


        :return: The ram_capacity of this Metric.
        :rtype: str
        """
        return self._ram_capacity

    @ram_capacity.setter
    def ram_capacity(self, ram_capacity: str):
        """Sets the ram_capacity of this Metric.


        :param ram_capacity: The ram_capacity of this Metric.
        :type ram_capacity: str
        """
        if ram_capacity is None:
            raise ValueError("Invalid value for `ram_capacity`, must not be `None`")  # noqa: E501

        self._ram_capacity = ram_capacity
